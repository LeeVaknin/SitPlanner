// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SitPlanner.Data;

namespace SitPlanner.Migrations
{
    [DbContext(typeof(SitPlannerContext))]
    [Migration("20190408155210_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SitPlanner.Models.AccessibilityRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessibilityRestrictionName");

                    b.Property<int?>("EventId");

                    b.Property<int?>("EventOptionId");

                    b.Property<int?>("InviteeId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventOptionId");

                    b.HasIndex("InviteeId");

                    b.ToTable("AccessibilityRestriction");
                });

            modelBuilder.Entity("SitPlanner.Models.Arrangement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<int?>("EventOptionId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventOptionId");

                    b.ToTable("Arrangement");
                });

            modelBuilder.Entity("SitPlanner.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("SitPlanner.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("SitPlanner.Models.EventOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventOption");
                });

            modelBuilder.Entity("SitPlanner.Models.Invitee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Comment");

                    b.Property<int?>("EventId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("IsComing");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("PersonalRestrictionId");

                    b.Property<int?>("PersonalRestrictionId1");

                    b.Property<int>("PhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PersonalRestrictionId");

                    b.HasIndex("PersonalRestrictionId1");

                    b.ToTable("Invitee");
                });

            modelBuilder.Entity("SitPlanner.Models.InviteeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId");

                    b.Property<int?>("EventId");

                    b.Property<int?>("EventOptionId");

                    b.Property<int?>("InviteeId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventOptionId");

                    b.HasIndex("InviteeId");

                    b.ToTable("InviteeCategory");
                });

            modelBuilder.Entity("SitPlanner.Models.InviteeTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArrangementId");

                    b.Property<int?>("EventId");

                    b.Property<int?>("EventOptionId");

                    b.Property<int?>("InviteeId");

                    b.Property<int?>("TableId");

                    b.HasKey("Id");

                    b.HasIndex("ArrangementId");

                    b.HasIndex("EventId");

                    b.HasIndex("EventOptionId");

                    b.HasIndex("InviteeId");

                    b.HasIndex("TableId");

                    b.ToTable("InviteeTable");
                });

            modelBuilder.Entity("SitPlanner.Models.PersonalRestriction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EventId");

                    b.Property<int?>("EventOptionId");

                    b.Property<int?>("InviteeId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventOptionId");

                    b.HasIndex("InviteeId");

                    b.ToTable("PersonalRestriction");
                });

            modelBuilder.Entity("SitPlanner.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SitPlanner.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccessibilityRestrictionId");

                    b.Property<int?>("AccessibilityRestrictionId1");

                    b.Property<int>("CapacityOfPeople");

                    b.Property<int?>("EventId");

                    b.Property<int>("TableType");

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityRestrictionId");

                    b.HasIndex("AccessibilityRestrictionId1");

                    b.HasIndex("EventId");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("SitPlanner.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SitPlanner.Models.AccessibilityRestriction", b =>
                {
                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("SitPlanner.Models.EventOption", "EventOption")
                        .WithMany("AccessibilityRestrictions")
                        .HasForeignKey("EventOptionId");

                    b.HasOne("SitPlanner.Models.Invitee", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId");
                });

            modelBuilder.Entity("SitPlanner.Models.Arrangement", b =>
                {
                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("SitPlanner.Models.EventOption", "EventOption")
                        .WithMany()
                        .HasForeignKey("EventOptionId");
                });

            modelBuilder.Entity("SitPlanner.Models.Category", b =>
                {
                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany("Categories")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("SitPlanner.Models.Event", b =>
                {
                    b.HasOne("SitPlanner.Models.User")
                        .WithMany("Events")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SitPlanner.Models.EventOption", b =>
                {
                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany("EventOptions")
                        .HasForeignKey("EventId");
                });

            modelBuilder.Entity("SitPlanner.Models.Invitee", b =>
                {
                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany("Invitees")
                        .HasForeignKey("EventId");

                    b.HasOne("SitPlanner.Models.PersonalRestriction")
                        .WithMany("CannottSitWith")
                        .HasForeignKey("PersonalRestrictionId");

                    b.HasOne("SitPlanner.Models.PersonalRestriction")
                        .WithMany("MustSitWith")
                        .HasForeignKey("PersonalRestrictionId1");
                });

            modelBuilder.Entity("SitPlanner.Models.InviteeCategory", b =>
                {
                    b.HasOne("SitPlanner.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("SitPlanner.Models.EventOption", "EventOption")
                        .WithMany("InviteeCategories")
                        .HasForeignKey("EventOptionId");

                    b.HasOne("SitPlanner.Models.Invitee", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId");
                });

            modelBuilder.Entity("SitPlanner.Models.InviteeTable", b =>
                {
                    b.HasOne("SitPlanner.Models.Arrangement")
                        .WithMany("InviteeTableList")
                        .HasForeignKey("ArrangementId");

                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("SitPlanner.Models.EventOption", "EventOption")
                        .WithMany()
                        .HasForeignKey("EventOptionId");

                    b.HasOne("SitPlanner.Models.Invitee", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId");

                    b.HasOne("SitPlanner.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");
                });

            modelBuilder.Entity("SitPlanner.Models.PersonalRestriction", b =>
                {
                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("SitPlanner.Models.EventOption", "EventOption")
                        .WithMany("PersonalRestrictions")
                        .HasForeignKey("EventOptionId");

                    b.HasOne("SitPlanner.Models.Invitee", "Invitee")
                        .WithMany()
                        .HasForeignKey("InviteeId");
                });

            modelBuilder.Entity("SitPlanner.Models.Table", b =>
                {
                    b.HasOne("SitPlanner.Models.AccessibilityRestriction")
                        .WithMany("IncompatibleTables")
                        .HasForeignKey("AccessibilityRestrictionId");

                    b.HasOne("SitPlanner.Models.AccessibilityRestriction")
                        .WithMany("RecommendedTables")
                        .HasForeignKey("AccessibilityRestrictionId1");

                    b.HasOne("SitPlanner.Models.Event", "Event")
                        .WithMany("Tables")
                        .HasForeignKey("EventId");
                });
#pragma warning restore 612, 618
        }
    }
}
